module powerflow {
    solver_method NR;
    NR_iteration_limit 100;  // Increase if needed
};
module tape;

schedule sw_status {
    //0-1 * * * * 0;
    0-2 * * * * 1;
    3-56 * * * * 0;
    57-59 * * * * 1;
}

clock {
    timezone PST+8PDT;
    starttime '2009-01-01 00:00:00';
    stoptime '2009-01-01 01:00:00';
}

module assert;

module connection;
object helics_msg {
    name gld_hlc_conn;
    parent load_switch;
    configure switch_test_02.json;
}


module reliability {
	maximum_event_length 18000;	//Maximum length of events in seconds (manual events are excluded from this limit)
	report_event_log true;
	}


object fault_check {				//Fault check object - required to make powerflow properly handle faults
	name test_fault;
    strictly_radial false;
	check_mode ONCHANGE;			//Fault check mode - should be in ONCHANGE - reliability will change it
	eventgen_object testgen_sw;		//Link to eventgen object - used to handle "unscheduled" events - fuses and switch openings
	output_filename testout.txt;	//"unsupported node" dump file
};

object metrics {
	name testmetrics;
	report_file testmetrics.txt;						//Name of the output file
	module_metrics_object pwrmetrics;					//Module-specific "metrics" object - a powerflow metrics object is specified here
	metrics_of_interest "SAIFI,SAIDI,CAIDI,ASAI,MAIFI";	//Metrics to output into the report file
	customer_group "groupid=METERTEST";					//Search criteria for determining "customers" of the system - similar to collectors - this group is both three-phase and triplex meters
	metric_interval 5 h; 								//Interval to run metrics - (separate from "simulation-long" metrics) - set to 0 for no metric updates (defaults to no interval updates)
	report_interval 5 h;								//Interval to dump metric updates to the output file.
}

//Manual object - switch
object eventgen {
	name testgen_sw;
	parent testmetrics;
	fault_type "SW-ABC";	//Phases A,B and C will switch
	manual_outages "load_switch,2009-01-01 00:00:00,2009-01-01 01:00:00";
}

object power_metrics {
	name pwrmetrics;
	base_time_value 60.0;
	}

object node {
    name feeder_head;
    bustype SWING;
    phases ABCN;
    nominal_voltage 7200; //132790;
}

object transformer {
    name substation_transformer;
    from feeder_head;
    to substation_meter;
    phases ABCN;
    configuration substation_transformer_config;
}

object transformer_configuration {
    name substation_transformer_config;
    connect_type WYE_WYE;
    install_type PADMOUNT;
    primary_voltage 7200; //132790;
    secondary_voltage 400; //7216;
    power_rating 8400;  // Adjusted rating
    impedance 0.00033+0.0022j;
}

object meter {
    groupid METERTEST;
    name substation_meter;
    phases ABCN;
    nominal_voltage 400; //7216.88;
    object recorder {
        name substation_recorder;
        file substation_data.csv;
        interval 60;
        property measured_voltage_A, measured_current_A, measured_power_A,measured_voltage_B, measured_current_B, measured_power_B,measured_voltage_C, measured_current_C, measured_power_C;
    };
}

object overhead_line {
    name feeder_backbone;
    phases ABCN;
    from substation_meter;
    to load_meter;
    length 10000;
    configuration line_configuration_1;
}

object line_configuration {
    name line_configuration_1;
    conductor_A overhead_line_conductor_1;
    conductor_B overhead_line_conductor_1;
    conductor_C overhead_line_conductor_1;
    conductor_N overhead_line_conductor_1;
    spacing line_spacing_1;
}

object line_spacing {
    name line_spacing_1;
    distance_AB 57.6 in;
    distance_BC 57.6 in;
    distance_AC 57.6 in;
    distance_AN 51.6 in;
    distance_BN 51.6 in;
    distance_CN 51.6 in;
}

object overhead_line_conductor {
    name overhead_line_conductor_1;
    rating.summer.continuous 256.0;  // Increase if needed
    geometric_mean_radius 0.01200 ft;
    resistance 0.1;
}

object meter {
    groupid METERTEST;
    name load_meter;
    phases ABCN;
    nominal_voltage 400; //7216.88;
    object recorder {
        name load_recorder;
        file load_data.csv;
        interval 60;
        property measured_voltage_A, measured_current_A, measured_power_A,measured_voltage_B, measured_current_B, measured_power_B,measured_voltage_C, measured_current_C, measured_power_C;    };
}

// Capacitor Object
object capacitor {
	phases ABC;				
	name sw_capacitor;
	pt_phase ABC;				
	parent load_meter;
	phases_connected ABC;		
	control VOLT;
	voltage_set_low 390.0;
	voltage_set_high 405.0;
	capacitor_A 1000;
	capacitor_B 1000; //10.0 kVAr;
	capacitor_C 1000; //10.0 kVAr;
	control_level INDIVIDUAL;
	switchA OPEN;
	switchB OPEN;
	switchC OPEN;
	time_delay 2.0;
	dwell_time 10;
	nominal_voltage 400;
}

object switch {
    name load_switch;
    phases ABC;
    from load_meter;
    to feeder_load;
    //status OPEN;  // Explicitly set initial status
    status sw_status;  // Apply the schedule
    object recorder {
        name sw_recorder;
        file sw_data.csv;
        interval 60;
        property status;
    };
}

object load {
    name feeder_load;
    nominal_voltage 400; //7216.88;
    phases ABC;
    constant_power_A 25-5j; //3454.81+1583.42j;  // Reduced load values
    constant_power_B 25+5j;
    constant_power_B 25+10j;
}


object load {
    name feeder_load02;
    parent load_meter;
    nominal_voltage 400; //7216.88;
    phases ABC;
    constant_power_A 1400+350j;  // Reduced load values
    constant_power_B 1400+350j;  // Reduced load values
    constant_power_C 1400+350j;  // Reduced load values
}
